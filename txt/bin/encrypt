#!/bin/bash
#echo "Abcd-ef12\nDef" | ./encrypt ABC-E #Aced-eg32\nDfh

# Check if keyword is supplied
if [ -z "$1" ]; then
  echo "Usage: $0 keyword"
  exit 1
fi

keyword=$1
key_index=0

# Create a string representing the extended alphabet
alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
alphabet_length=${#alphabet}

# Function to get the index of a character in the alphabet
get_char_index() {
  local char=$1
  local index=-1

  for (( i=0; i<alphabet_length; i++ )); do
    if [[ ${alphabet:i:1} == $char ]]; then
      index=$i
      break
    fi
  done

  echo $index
}

# Read the input text from stdin
while IFS= read -r line; do
  # Process each character in the line
  for (( i=0; i<${#line}; i++ )); do
    char=${line:i:1}
    
    # If the character is in the alphabet, perform the cipher
    if [[ $alphabet == *$char* ]]; then
      # Get the index of the character in the alphabet
      char_index=$(get_char_index "$char")
      
      # Get the index of the current keyword character in the alphabet
      key_char=${keyword:$key_index:1}
      key_char_index=$(get_char_index "$key_char")
      
      # If the keyword character is not in the alphabet, just print the character as is
      if [[ $key_char_index -eq -1 ]]; then
        printf '%s' "$char"
      else
        # Calculate the new index
        new_index=$(( (char_index + key_char_index) % alphabet_length ))
        
        # Get the new character from the alphabet
        new_char=${alphabet:$new_index:1}
        
        # Print the new character
        printf '%s' "$new_char"
      fi
      
    else
      # If the character is not in the alphabet, just print it as is
      printf '%s' "$char"
    fi
    # Update the keyword index
    key_index=$(( (key_index + 1) % ${#keyword} ))
  done

  key_index=$(( (key_index + 1) % ${#keyword} ))
  # Print a newline character at the end of each line (except for the last line)
  printf '\n'
done

# Remove the trailing newline
if [[ -z $line ]]; then
  printf '\b'
fi
