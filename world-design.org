#+TITLE: Design of HackerIO World

* World
30000x30000 meters devided into sectors.
Each sector has a Base somewhere. Getting control over the base should give advantages.

** Sensors
Sensors, like vision, are activated each time cooldown has been reached.
Each unit within range is logged with probability of accuracy.
Better accuracy and range may be optained through upgrades.

* Units
** Measurements
- meters
- seconds
- %

** Fields
- id
- type
- physical-range (from HQ or Base, maybe exceed range with slower speed???)
- max-speed (m/s)
- speed (m/s)
- health (%)
- security
- password (0-security)
- hack
  - cooldown (How long before another hack attempt can be made)
  - last-used
- pos
  - x (0-30000 (meters))
  - y (0-30000 (meters))
- target
  -x (unit stops when getting out of range of HQ or Base)
  -y (unit stops when getting out of range of HQ or Base)
- sensor
  - range (m)
  - accuracy (%)
  - cooldown (s)
  - last-used (t)
- log

** Types
- hq
- base
- scout
- builder
- ballistics

** Actions
- hack
- sensor (When seing another unit information is logged: id, type, pos, security, health)
- set-target
- set-speed
- get-log

* Dynamics-old
** Basic Example
User has HQ unit and a robotvehicle
AI has HQ and some turrets

Mission: Destroy AI HQ.

The robotvehicle cannot deal damage, but has heat sensors to detect turrets and other vehicles
Other units are scattered around the map

If a robotvehicle detects a unit (by looking in its log) its uid can also be found, like "def-456".
Some units might have some password mechanism.

The unit def-456 can now be taken over and used.

Commands send from HQ to unit are broadcast to any other unit u with (dist u HQ) and (dist u unit) less than (dist HQ unit) (Somehow in between and intercepting). If u has radio the communication will be added to the log.

Units are hard to "see", so capturing broadcasts is essential.

When broadcasting the uid of the unit is encrypted. (With some kind of breakable encryption. Like 100 possibilities or so.)

Depending on level and upgrades positions in broadcasts might be unprecise.

* Units-old
** Data
FIXED:
- id
- type
- max-speed
- heat-emission
- range
- cooldown-time
- damage

VARIABLE:
- encryption-key 0-100 (Depending on "level" or upgrades)
- cooldown-left
- speed
- x
- y
- target-x
- target-y
- log
